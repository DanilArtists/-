1)

#include <iostream>
#include <memory>
#include <string>

using namespace std;

class Kuznec 
{
public:
    virtual void cuznica() = 0; 
};

class SwordKuznec  : public Kuznec 
{
public:
    void cuznica() override 
    {
        cout << "Кузнец кует меч" << endl;
    }
};

class ShieldKuznec : public Kuznec 
{
public:
    void cuznica() override 
    {
        cout << "Кузнец кует щит" << endl;
    }
};

class KuznecSlucay
{
public:
    enum KuznecType 
    {
        SWORD,
        SHIELD
    };

    static unique_ptr<Kuznec> createKuznec(KuznecType type) 
    {
        if (type == SWORD) 
        {
            return make_unique<SwordKuznec>();
        } else if (type == SHIELD) 
        {
            return make_unique<ShieldBlacksmith>();
        }
        return nullptr;
    }
};

int main() 
{
    auto swordKuznec = BlacksmithSlucay::createKuznec(KuznecSlucay::SWORD);
    swordKuznec->cuznica();

    auto shieldKuznec = KuznecSlucay::createKuznec(KuznecSlucay::SHIELD);
    shieldKuznec->cuznica();
}

2)
#include <iostream>

using namespace std;

class Pravitelstvo 
{
private:
    static Pravitelstvo* instance;

    Pravitelstvo() 
    {
        cout << "Создано правительство" << endl;
    }

public:
    Pravitelstvo(Pravitelstvo const&) = delete;
    void operator=(Pravitelstvo const&) = delete;

    static Pravitelstvo* getInstance() 
    {
        if (instance == nullptr) 
        {
            if (instance == nullptr) 
            {
                instance = new Pravitelstvo();
            }
        }
        return instance;
    }

    void govern() 
    {
        cout << "Власть у правительство" << endl;
    }
};

Pravitelstvo* Pravitelstvo::instance = nullptr;

int main() 
{
    Pravitelstvo* prav1 = Pravitelstvo::getInstance();
    prav1->pravit();

    Pravitelstvo* prav2 = Pravitelstvo::getInstance();
    prav2->pravit();

    cout << "prav1 и prav2 одинаковы" << (prav1 == prav2) << endl;
}
