#include <iostream>
#include <vector>

using namespace std;

class Observer 
{
public:
    virtual void update() = 0;
    virtual ~Observer() {}
};

class Teacher 
{
private:
    vector<Observer*> observers;
    string message;

public:
    void attach(Observer* observer) 
    {
        observers.push_back(observer);
    }

    void detach(Observer* observer) 
    {
        observers.erase(remove(observers.begin(), observers.end(), observer), observers.end());
    }

    void notify() 
    {
        for (Observer* observer : observers) 
        {
            observer->update();
        }
    }

    void wrapUp() 
    {
        message = "Можете собираться и идти домой";
        cout << "Преподаватель: " << message << endl;
        notify();
    }
};

class Student : public Observer 
{
protected:
    string name;

public:
    Student(string name) : name(name) {}
    virtual ~Student() {}
    virtual string getName() { return name; }
};

class StudentA : public Student 
{
public:
    StudentA(string name) : Student(name) {}

    void update() override 
    {
        cout << "Студент " << getName() << " Начинает собирать вещи." << endl;
    }
};

class StudentB : public Student 
{
public:
    StudentB(string name) : Student(name) {}

    void update() override 
    {
        cout << "Студент " << getName() << " Выключает компьютер." << endl;
    }
};

class StudentC : public Student 
{
public:
    StudentC(string name) : Student(name) {}

    void update() override 
    {
        cout << "Студент " << getName() << " прощаться с друзьями." << endl;
    }
};

int main() 
{
    setlocale(LC_ALL, "Ru");

    Teacher teacher;

    StudentA studentA("Сергей");
    StudentB studentB("Антон");
    StudentC studentC("Лиля");

    teacher.attach(&studentA);
    teacher.attach(&studentB);
    teacher.attach(&studentC);

    teacher.wrapUp();

    cout << endl;

    teacher.detach(&studentB);
    cout << "Лиля ушла раньше" << endl;
    teacher.wrapUp();
}
