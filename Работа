#include <iostream>
#include <vector>
using namespace std;

class IDamageComponent
{
public:
 virtual float GetDamage() = 0;
};

class DefaultDamageComponent : public IDamageComponent
{
private:

protected:
 float damage;

public:

 DefaultDamageComponent(float damage)
 {
  this->damage = damage;
 }

 float GetDamage() override
 {
  return damage;
 }
};

class PlayerDamageController
{
private:
 float baseDamage;
 IDamageComponent* damageComponent;

 PlayerDamageController()
 {
  damageComponent = new DefaultDamageComponent(baseDamage);
 }
};

class DamageDecorator : public IDamageComponent
{
private:

protected:
 IDamageComponent* damageComponent;
public:

 DamageDecorator(IDamageComponent* damageComponent)
 {
  this->damageComponent = damageComponent;
 }

 float GetDamage() override
 {
  return damageComponent->GetDamage();
 }
};

class AddFixedDamageDecorator : public DamageDecorator
{
private:

protected:
 float addDamage;
public:
 AddFixedDamageDecorator(IDamageComponent* component, float addDamage) : DamageDecorator(component)
 {
  this->addDamage = addDamage;
 }

 float GetDamage() override
 {
  return addDamage + damageComponent->GetDamage();
 }
};

class AddPercentDamageDecorator : public DamageDecorator
{
private:
    float percent;

public:
    AddPercentDamageDecorator(IDamageComponent* component, float percent) : DamageDecorator(component)
    {
        this->percent = percent;
    }

    float GetDamage() override
    {
        return damageComponent->GetDamage() * (1 + percent / 150.0f);
    }
  ~AddPercentDamageDecorator() override {}
};

int main() 
{
    IDamageComponent* baseDamage = new DefaultDamageComponent(150.0f);  

    IDamageComponent* percentDamage = new AddPercentDamageDecorator(baseDamage, 20.0f);

    IDamageComponent* finalDamage = new AddFixedDamageDecorator(percentDamage, 50.0f);

    cout << "Базовой урон: " << baseDamage->GetDamage() << endl; 
    cout << "Урон увеличен на 20%" << percentDamage->GetDamage() << endl;  
    cout << "Критический урон (20% + 50)" << finalDamage->GetDamage() << endl; 
    delete finalDamage; 
}
